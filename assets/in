#!/usr/bin/env python

import json
import os 
import subprocess
import sys
import paramiko

DEBUG = False

if DEBUG:
    print('===\nIN\n===')

def in_(instream):
    pr_config = json.load(instream)

    if not pr_config.get('version', None):
        pr_config['version'] = dict()

    sys_dir = sys.argv[1]
    server = pr_config["source"].get('server')
    port = pr_config["source"].get('port', 22)
    private_key = pr_config["source"].get('private_key','')
    base_dir = pr_config["source"].get('base_dir')
    version = pr_config.get("version").get("ref")
    user = pr_config["source"].get('user')
    sync_dirs = [ u'%s@%s:%s' % (user, server, os.path.join(str(base_dir), version, str(x))) for x in pr_config["source"].get('sync_dirs')]
    synced_dirs = [ os.path.join(str(sys_dir), str(x)) for x in pr_config["source"].get('sync_dirs')]
    params = pr_config.get("params", {}).get('rsync_opts','')
    disable_version_path = True if pr_config['source'].get('disable_version_path', 'false') == 'true' else False

    stdout = {}

    if DEBUG:
        print('server', server)
        print('port', port)
        print('private_key', private_key)
        print('base_dir', base_dir)
        print('sync_dirs', sync_dirs)
        print('synced_dirs', synced_dirs)
        print('user', user)
        print('version', version)
        print('disable_version_path', disable_version_path)

    home_user = os.path.expanduser('~')

    server_key = os.path.join(home_user, '.ssh/server_key')
    ssh_config = os.path.join(home_user, '.ssh/config')
    ssh_folder = os.path.join(home_user, '.ssh')
    os.makedirs(ssh_folder, exist_ok=True)

    cmd = 'echo \'%s\' > %s' % (private_key.replace('\\n', '\n'), server_key)
    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output, error = ps.communicate()

    cmd = 'echo \'Host $SERVER\n\tStrictHostKeyChecking no\n\' > %s' % (ssh_config)
    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output, error = ps.communicate()

    os.chmod(server_key,  int('600', base=8))
    os.chmod(ssh_config,  int('600', base=8))

    k = paramiko.RSAKey.from_private_key_file(server_key)
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(hostname=server, username=user, pkey=k, port=port)

    valid_dirs = []
    for dir in synced_dirs:
        if 'No such file or directory'.lower() in dir.lower():
            valid_dirs.append(dir)

    cmd = u"rsync -avPt %s -e 'ssh -i ~/.ssh/server_key -o StrictHostKeyChecking=no -o LogLevel=ERROR -p %s' %s %s" % (params, port, " ".join(sync_dirs), sys_dir)
    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output, error = ps.communicate()
    if len(error) > 0:
        print(output)
        print(error)
    if DEBUG:
        print('Cmd:              ', cmd)


    if len(valid_dirs) > 0:
        cmd = "find " + " ".join(valid_dirs) + " -printf '%T@ %p\n' | sort -n "
        ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
        if len(error) > 0:
            print(output)
            print(error)

        output = ps.communicate()[0].decode('utf-8').split('\n')
        output_len = len(output)
        recent_file = output[output_len - 2]
        recent_timestamp = recent_file.split(' ')[0].split('.')[0]
        if DEBUG:
            print('Cmd:              ', cmd)
            print('Sync Dirs:        ', valid_dirs)
            print('Recent Files:     ', output_len, '\n', output)
            print('Recent File:      ', recent_file)
    else:
        recent_timestamp = version
        output = []
        if DEBUG:
            print('NOTE:           : No local valid dirs found')
            print('Recent Timestamp: ', recent_timestamp)

    stdout['version'] = {}
    stdout['version']['ref'] = str(recent_timestamp)
    stdout['metadata'] = []
    stdout['metadata'].append({'name' : 'Num Files', 'value': str(len(output)) })

    remote_sync_dir = os.path.join(base_dir, recent_timestamp)
    stdout['metadata'].append({'name' : 'Remote Sync Dir', 'value': remote_sync_dir})

    return stdout

def main():
    print(json.dumps(in_(sys.stdin)))

if __name__ == '__main__':
    main()
