#!/usr/bin/env python

import json
import os 
import subprocess
import sys
import paramiko

DEBUG = True if os.getenv('DEBUG') == 'true' else False

if DEBUG:
    print('===\nCHECK\n===')

def in_(instream):
    pr_config = json.load(instream)

    if not pr_config.get('version', None):
        pr_config['version'] = dict()

    server = pr_config["source"].get('server')
    port = pr_config["source"].get('port', 22)
    private_key = pr_config["source"].get('private_key','')
    base_dir = pr_config["source"].get('base_dir')
    sync_dirs = pr_config["source"].get('sync_dirs')
    user = pr_config["source"].get('user')
    version = pr_config.get("version", dict())
    disable_version_path = True if pr_config['source'].get('disable_version_path', 'false') == 'true' else False

    stdout_targets = []

    if len(version) > 0:
        stdout_targets.append(version)

    if DEBUG:
        print('server', server)
        print('port', port)
        print('private_key', private_key)
        print('base_dir', base_dir)
        print('sync_dirs', sync_dirs)
        print('user', user)
        print('version', version)
        print('disable_version_path', disable_version_path)

    home_user = os.path.expanduser('~')

    server_key = os.path.join(home_user, '.ssh/server_key')
    ssh_config = os.path.join(home_user, '.ssh/config')
    ssh_folder = os.path.join(home_user, '.ssh')
    os.makedirs(ssh_folder, exist_ok=True)

    cmd = 'echo \'%s\' > %s' % (private_key.replace('\\n', '\n'), server_key)
    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
    output = ps.communicate()[0]

    cmd = 'echo \'Host $SERVER\n\tStrictHostKeyChecking no\n\' > %s' % (ssh_config)
    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
    output = ps.communicate()[0]

    os.chmod(server_key,  int('600', base=8))
    os.chmod(ssh_config,  int('600', base=8))

    k = paramiko.Ed25519Key.from_private_key_file(server_key)
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(hostname=server, username=user, pkey=k, port=port)

    find_cmd = "find " + base_dir + " -maxdepth 1 -mindepth 1 -type d -exec stat {} -c '%Y %n' \; | sort -n | tail"
    ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(find_cmd)
    refs = ssh_stdout.read().decode('utf-8').split('\n')

    if len(refs) == 0:
        ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command("mkdir -p " + os.path.join(base_dir, '0000000001'))
        ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(find_cmd)
        refs = ssh_stdout.read().decode('utf-8').split('\n')

    recent_file = refs[len(refs) - 2]
    recent_file_parts = recent_file.split(' ')[1].split('/')
    recent_timestamp = recent_file_parts[len(recent_file_parts) - 1]

    if len(version) == 0:
        stdout_targets.append({ "ref": str(recent_timestamp) })
    elif len(version) > 0:
        if version['ref'] != str(recent_timestamp):
            stdout_targets.append({ "ref": str(recent_timestamp) })

    if DEBUG:
        print(refs, ssh_stderr.read())
        print('Recent File:      ', recent_file)
        print('Recent File Parts:', recent_file_parts)
        print('Recent Timestamp: ', recent_timestamp)
        print('stdout targets:', stdout_targets)


    return stdout_targets

def main():
    print(json.dumps(in_(sys.stdin)))

if __name__ == '__main__':
    main()
